fn main() {
    let mut s = String::from("hello world");
    // let index = first_word_1(&s);
    // s.clear();
    // println!("index: {index}");

    let word = first_word_2(&s);    // 不可变借用 &String -> &str
    s.clear();                            // Error! 不可变借用和可变借用不能在相同作用域同时存在
    println!("s:{s},  word:{word}");
}

///
/// 编写一个函数，该函数接收一个用空格分隔单词的字符串，并返回在该字符串中找到的第一个单词。
/// 如果函数在该字符串中并未找到空格，则整个字符串就是一个单词，所以应该返回整个字符串
///
fn first_word_1(s: &String) -> usize {
    let bytes = s.as_bytes();

    for (index, &item) in bytes.iter().enumerate() {
        if item == b' ' {
            return index;
        }
    }

    s.len()
}

fn first_word_2(s: &String) -> &str {
    let bytes = s.as_bytes();
    let iter = bytes.iter();
    for (i, &item) in iter.enumerate() {
        if item == b' ' {
            return &s[0..i];
        }
    }
    &s[..]
}